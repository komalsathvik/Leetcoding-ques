// pq based question  -> Max average pass ratio
There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.

You are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.

The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.

Return the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

Input: classes = [[1,2],[3,5],[2,2]], extraStudents = 2
Output: 0.78333
Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.
Example 2:

Input: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4
Output: 0.53485
 

Constraints:

1 <= classes.length <= 105
classes[i].length == 2
1 <= passi <= totali <= 105
1 <= extraStudents <= 105

Intuition
We will consider priority queue based approach to solve this question.

Approach
We will take a Pair type class where we consider the ratio,index and gain of it ,
Gain function gives us the gain of that particular class after adding an extra student,
so gain=(pass+1/total+1)-(pass/total);
since after student how much pass ratio subtracted by before adding it by which we get gain value
Now add values of Pair type into PriorityQueue based of max heap of gain value, that means every time we take out the class from pq which has max gain after adding it so that gives the maximised final answer this runs untill the extra students are empty!!!

Complexity
Time complexity:O((N + M) log N)
since building pq takes 0(NlogN)
for each student polling takes O(MlogN)
so 0(NlogN + MlogN)== 0((N+M)logN)
Space complexity:O(N)

#code 

class Solution {
    class Pair {
    double ratio;
    double gain;
    int index;
    Pair(double ratio, int index,double gain) {
        this.ratio = ratio;
        this.index = index;
        this.gain=gain;
    }
}
    public double calcGain(int total,int pass){
        return (double)(pass + 1) / (total + 1) - (double)pass / total;
    }
    public double maxAverageRatio(int[][] classes, int extraStudents) {
        int n=classes.length;
        double[] arr=new double[classes.length];
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> Double.compare(b.gain, a.gain));
        for (int i = 0; i < classes.length; i++) {
            double ratio = (double) classes[i][0] / classes[i][1];
            double gain=calcGain(classes[i][1],classes[i][0]);
            pq.add(new Pair(ratio, i,gain));
        }
        while(extraStudents-->0){
            Pair pair=pq.poll();
            int idx=pair.index;
            classes[idx][0]+=1;
            classes[idx][1]+=1;
            double ratio = (double) classes[idx][0] / classes[idx][1];
            double gain=calcGain(classes[idx][1],classes[idx][0]);
            pq.add(new Pair(ratio,idx,gain));
        }
        double sum=0;
        while(!pq.isEmpty()){
            sum+=pq.poll().ratio;
        }
        return sum/n;
    }                      
}