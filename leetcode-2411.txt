#QUES --> Smallest subarrays with max bitwise or 
You are given a 0-indexed array nums of length n, consisting of non-negative integers. For each index i from 0 to n - 1, you must determine the size of the minimum sized non-empty subarray of nums starting at i (inclusive) that has the maximum possible bitwise OR.

In other words, let Bij be the bitwise OR of the subarray nums[i...j]. You need to find the smallest subarray starting at i, such that bitwise OR of this subarray is equal to max(Bik) where i <= k <= n - 1.
The bitwise OR of an array is the bitwise OR of all the numbers in it.

Return an integer array answer of size n where answer[i] is the length of the minimum sized subarray starting at i with maximum bitwise OR.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,0,2,1,3]
Output: [3,3,2,2,1]
Explanation:
The maximum possible bitwise OR starting at any index is 3. 
- Starting at index 0, the shortest subarray that yields it is [1,0,2].
- Starting at index 1, the shortest subarray that yields the maximum bitwise OR is [0,2,1].
- Starting at index 2, the shortest subarray that yields the maximum bitwise OR is [2,1].
- Starting at index 3, the shortest subarray that yields the maximum bitwise OR is [1,3].
- Starting at index 4, the shortest subarray that yields the maximum bitwise OR is [3].
Therefore, we return [3,3,2,2,1]. 
Example 2:

Input: nums = [1,2]
Output: [2,1]
Explanation:
Starting at index 0, the shortest subarray that yields the maximum bitwise OR is of length 2.
Starting at index 1, the shortest subarray that yields the maximum bitwise OR is of length 1.
Therefore, we return [2,1].
 

Constraints:

n == nums.length
1 <= n <= 105
0 <= nums[i] <= 109

#Solution
Intuition
We need to check to find the max bitwise or value having the minimum length of subarray as possible.

Approach
Staring towards the last index we traverse to index 0. By maintaing a array of size 32 for noting down set bit of that nums[i] for j where j travels from 0 to 32 to check where bit is set or not.
If that bit is set we update the arr[j] with this i. It means this particular bit is set for this nums[i].
And we will find max of the arr[32] by the max index of i where the bit is set and ans[i]=max-i+1 (since len is asked we need to add 1).

NOTE : WHY WE NEED TO FIND MAX IN arr[32], Because till that value we need to set the bit so till that position the subarray must go so it is max index therefore ans becomes max-i+1
Here max means the value at arr[j] --> (index of nums).

Complexity
Time complexity:O(N)
Space complexity:O(N)


#CODE
class Solution {
    static boolean checkBit(int n,int i){
        return ((n)&(1<<i))!=0;
    }
    public int[] smallestSubarrays(int[] nums) {
        int n=nums.length;
        int[] ans=new int[n];
        int[] arr=new int[32];
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<32;j++){
                if(checkBit(nums[i],j)){
                    arr[j]=i;
                }
            }
            int max=i;
            for(int j=0;j<32;j++){
                max=Math.max(max,arr[j]);
            }
            ans[i]=(max-i)+1;
        }
        return ans;
    }
}