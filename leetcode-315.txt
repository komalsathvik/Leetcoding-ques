ques -- >> count of smaller elements after self
Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].

 

Example 1:

Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Example 2:

Input: nums = [-1]
Output: [0]
Example 3:

Input: nums = [-1,-1]
Output: [0,0]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

smaller elements (type ques)---> MERGE SORT approach
#code 
class Solution {
    static class Pair{
        int value;
        int index;
        Pair(int value,int index){
            this.value=value;
            this.index=index;
        }
    }
     static List<Integer> list;
    static void mergeSort(Pair[] arr,int low,int high){
        if(low>=high){
            return;
        }
       int mid = low + (high - low) / 2;
        mergeSort(arr,low,mid);
        mergeSort(arr,mid+1,high);
        merge(arr,low,mid,high);
    }
    static void merge(Pair[] arr,int low,int mid,int high){
        int p1=low;
        int p2=mid+1;
        int p3=0;
        int ct=0;
        List<Pair> temp = new ArrayList<>();
        while(p1<=mid && p2<=high){
            if(arr[p1].value<=arr[p2].value){
                list.set(arr[p1].index,list.get(arr[p1].index)+ct);
                temp.add(arr[p1++]);
            }
            else{
                ct++;
               temp.add(arr[p2++]);
            }
        }
        while(p1<=mid){
            list.set(arr[p1].index, list.get(arr[p1].index) + ct);
            temp.add(arr[p1++]);
        }
        while(p2<=high){
               temp.add(arr[p2++]);
        }
        for(int i=0;i<temp.size();i++){
            arr[i+low]=temp.get(i);
        }
    }
    public List<Integer> countSmaller(int[] nums) {
    list=new ArrayList<>();
    for(int i=0;i<nums.length;i++)list.add(0);
    Pair[] arr=new Pair[nums.length];
    for (int i = 0; i < nums.length; i++) arr[i] = new Pair(nums[i], i);
        mergeSort(arr,0,arr.length-1);
        return list;
    }
}