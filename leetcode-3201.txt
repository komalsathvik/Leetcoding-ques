ques ----> Find the maximum length of valid subsequence-I
LINK - https://leetcode.com/problems/find-the-maximum-length-of-valid-subsequence-i/solutions/6966717/on-approach-explained-java-by-komalsathv-x1k2/

You are given an integer array nums.
A subsequence sub of nums with length x is called valid if it satisfies:

(sub[0] + sub[1]) % 2 == (sub[1] + sub[2]) % 2 == ... == (sub[x - 2] + sub[x - 1]) % 2.
Return the length of the longest valid subsequence of nums.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [1,2,3,4]

Output: 4

Explanation:

The longest valid subsequence is [1, 2, 3, 4].

Example 2:

Input: nums = [1,2,1,1,2,1,2]

Output: 6

Explanation:

The longest valid subsequence is [1, 2, 1, 2, 1, 2].

Example 3:

Input: nums = [1,3]

Output: 2


#SOLUTION- APPROACH
Intuition
JAVA APPROACH

There are three possibilities to check this problem by considering the max of those these 3 we can get answer, where the values could be in this formats,
1.even -- odd -- even - odd where %2 always gives 1.
2.odd -- even -- odd -- odd where %2 always gives 1.
3.even -- even -- even -- even (or) odd - odd - odd which always gives %2 as 0.

Approach
So check maximum of 3 possibilites 3rd possibility is clearly is by taking odd and even count max of it and 1st and 2nd could be by checking alternatives and count the alternatives possibilty for both odd-even alternatives and even-odd alternatives and get the Maximum of it.

Complexity
Time complexity:O(N)
Space complexity:O(1)