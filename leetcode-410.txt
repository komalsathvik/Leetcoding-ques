QUES ---> Split Array Largest Sum ---(BINARY SEARCH HARD)

Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= k <= min(50, nums.length)


#Approach
Range of B.S IS ((MAX of array <---> SUM of array))
apply bs in this range and check whether the array can be splitted into k parts prop by maintaining that bs sum as max in the splitted arrays

#CODE 
class Solution {
    static boolean check(int[] arr,int mid,int k){
        int sum=0;
        int i=0;
        int ct=1;
        while(i<arr.length){
            if(sum+arr[i]>mid){
                sum=arr[i];
                ct++;
            }
            else{
                sum+=arr[i];
            }
            i++;
        }
        return ct<=k;
    }
    public int splitArray(int[] nums, int k) {
        int sum=0;
        int max=0;
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];
            max=Math.max(max,nums[i]);
        }
        int start=max;
        int end=sum;
        int ans=0;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(check(nums,mid,k)){
                ans=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return ans;
    }
}